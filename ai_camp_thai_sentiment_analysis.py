# -*- coding: utf-8 -*-
"""AI Camp - Thai Sentiment Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cglpGhU-Vn49atWeO-PcFGT2ftkwuobQ

# การวิเคราะห์ข้อความที่แสดงถึงอารมณ์ความรู้สึก (Sentiment Analysis)

ตัวอย่างต่อไปนี้ดัดแปลงจากผลงานของนายรักษ์พล ทองมา ในวิชาการค้นคว้าอิสระ (Independent Study) ปี 2019 หลักสูตรวิศวกรรมคอมพิวเตอร์และเทคโนโลยีการเงิน

## ขั้นตอนที่ 1: นำเข้าไลบรารีที่ต้องการใช้
"""

import requests
from PIL import Image
from io import BytesIO

import pandas as pd
import numpy as np
import matplotlib.pyplot as plot

"""## ขั้นตอนที่ 2: การเตรียมข้อมูล

### ลักษณะของข้อมูลเบื้องต้น
"""

r_2 = requests.get('https://sv1.picz.in.th/images/2019/12/20/iHBoCP.md.jpg')
review_img = Image.open(BytesIO(r_2.content))
review_img

"""### ปรับข้อมูลให้อยู่ในรูปแบบที่เหมาะสม"""

all_df = pd.read_csv('https://github.com/ruxpolth/my-is/raw/master/sentiment_data_final.csv')
all_df

"""### สำรวจและทำความสะอาดข้อมูล"""

all_df.info()

all_df.Type.value_counts().plot.bar()

"""### แบ่งข้อมูลสำหรับการ Train และ Test"""

from sklearn.model_selection import train_test_split

train_df, test_df = train_test_split(all_df, test_size=0.25, random_state=2022)
train_data = train_df['Text']
test_data = test_df['Text']

train_label = train_df['Type']
test_label = test_df['Type']

"""## ขั้นตอนที่ 3: สกัดคุณลักษณะของข้อมูล

### ติดตั้งเครื่องมือวิเคราะห์ภาษาไทย
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install pythainlp

"""ตัวอย่างการใช้งาน word_tokenize กับประโยคภาษาไทย"""

from pythainlp import word_tokenize

message = 'เมื่อเวลา 11.05 น. วันที่ 12 ต.ค. 2565 นายธานี แสงรัตน์ อธิบดีกรมสารนิเทศและโฆษกกระทรวงการต่างประเทศ แถลงข่าวว่า ในช่วงเวลานี้สื่อมวลชนให้ความสนใจเกี่ยวกับการประชุมผู้นำเขตเศรษฐกิจเอเปก ครั้งที่ 29 หรือ APEC 2022 โดยเฉพาะผู้นำเขตเศรษฐกิจเอเปกที่จะเดินทางเข้าร่วมการประชุมในช่วงวันที่ 18-19 พ.ย. 2565 โดยกระทรวงการต่างประเทศ ขอให้มั่นใจได้ ไม่ว่าจะเป็นผู้นำระดับสูงท่านใดเข้าประชุม ประเทศไทยพร้อมต้อนรับทุกเขตเศรษฐกิจอย่างเต็มที่และสมเกียรติ ซึ่งการประชุมดังกล่าวมีความสำคัญเป็นอย่างยิ่งที่เกิดขึ้นท่ามกลางสถานการณ์ของโลกและสถานการณ์การฟื้นฟูเศรษฐกิจภายหลังการเกิดโรคระบาดโควิด-19'
word_tokenize(message)

def thai_token(text):
    text = text.lower()
    text = text.replace('\n',' ')
    token = word_tokenize(text, engine="newmm")
    return token

from sklearn.feature_extraction.text import CountVectorizer

feat_vector = CountVectorizer(tokenizer=thai_token, ngram_range=(1,2))
feat_vector.fit(train_data)

"""CountVectorizer เป็นตัวที่ใช้แปลงข้อความให้เป็นตัวเลข"""

train_feature = feat_vector.transform(train_data)
test_feature = feat_vector.transform(test_data)

from sklearn.preprocessing import normalize

train_feature_normalize = normalize(train_feature)
test_feature_normalize = normalize(test_feature)

"""## ขั้นตอนที่ 4: สร้างแบบจำลองและประเมินผล"""

from sklearn.svm import LinearSVC

from sklearn.model_selection import cross_validate, cross_val_score
from sklearn.metrics import (classification_report, make_scorer,
                             confusion_matrix, accuracy_score,
                             precision_score, recall_score, f1_score)

model_SVC = LinearSVC(random_state=2022)
model_SVC.fit(train_feature_normalize, train_label)

c5_SVC = cross_val_score(model_SVC, train_feature_normalize,
                         train_label, cv=5, scoring='accuracy')
mc5_SVC = cross_val_score(model_SVC, train_feature_normalize,
                          train_label, cv=5, scoring='accuracy').mean()
print(c5_SVC)
print(mc5_SVC)

scoring = {'accuracy' : make_scorer(accuracy_score),
           'precision' : make_scorer(precision_score),
           'recall' : make_scorer(recall_score),
           'f1_score' : make_scorer(f1_score)}

c5_SVC_CV_score = cross_validate(model_SVC, train_feature_normalize,
                                 train_label, cv=5, scoring=(scoring))
c5_SVC_CV_score

predict_SVC = model_SVC.predict(test_feature_normalize)
result_table = pd.DataFrame()

result_table['Text'] = test_data
result_table['Type'] = test_label
result_table['SVM_Predict'] = predict_SVC

result_list = [ x==y for x,y in zip(test_label, predict_SVC)]
result_table['Predict_result'] = result_list

result_table